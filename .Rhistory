}
verll2 <- Vectorize(loglikeli3)
verll2 <- Vectorize(loglikeli2)
ll2 <- optim(c(0.2, 1.5), fn = loglikeli3)
ll2
emv2 <- ll2$par
emv2
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)])
return(-out)
}
verll3 <- Vectorize(loglikeli4)
ll3 <- optimize(c(0.3, 1.5), loglikeli4)
ll3 <- optimize(c(0.3, 1.5), fn = loglikeli4 )
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4)
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], log = TRUE)
return(-out)
}
verll3 <- Vectorize(loglikeli4)
verll4 <- Vectorize(loglikeli4)
ll4 <- optim(c(0.3, 1.5), fn = loglikeli4)
loglikeli4(c(0.7, 1))
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], log = TRUE))
return(-out)
}
verll4 <- Vectorize(loglikeli4)
ll4 <- optim(c(0.3, 1.5), fn = loglikeli4)
loglikeli4(c(0.7, 1))
ll4
emv2
ll4 <- optim(c(0.3, 1.5), fn = loglikeli4)
emv3 <- ll4$par
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4)
emv3 <- ll4$par
verll3 <- Vectorize(loglikeli4)
verll3 <- Vectorize(loglikeli4)
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4)
emv3 <- ll4$par
mean
function(mean)
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4, hessian = TRUE)
emv3 <- ll3$par
ll3
loglikeli3 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli2)
ll2 <- optim(c(0.2, 1.5), fn = loglikeli3, hessian = TRUE)
emv2 <- ll2$par
emv2
ll2$hessian
library(ggplor2)
library(ggplot2)
ggplot(data.frame(x=c(0, 30)), aes(x)) + stat_function(fun=verll2, size = 3)+
theme_bw()
ggplot(data.frame(x=c(0, 1)), aes(x)) + stat_function(fun=verll2, size = 3)+
theme_bw()
verll2 <- Vectorize(loglikeli2)
ggplot(data.frame(x=c(0, 1)), aes(x)) + stat_function(fun=verll2, size = 3)+
theme_bw()
verll2 <- Vectorize(loglikeli3)
ggplot(data.frame(x=c(0, 1)), aes(x)) + stat_function(fun=verll2, size = 3)+
theme_bw()
library(rgl)
install.packages("rgl")
library(rgl)
library(rgl)
require(rgl)
library(rgl)
install.packages("rgl", dependencies = TRUE)
require(rgl)
library(rgl)
library(rgl)
library(rgl)
library(rql)
require(rql)
install.packages("rgl", dependencies = TRUE)
require(rql)
require(lattice)
library(lattice)
param1 <- seq(-2, 2, length= 30)
names(param1) <- param1
param1
param2 <- seq(0.1, 4, length= 30)
names(param2) <- param2
?outer
param1 <- seq(-1, 1, length = 30)
names(param1) <- param1
param2 <- seq(0, 100, length= 30)
names(param2) <- param2
z <- outer(X = param1, Y = param2, FUN = LogL)
z <- outer(X = param1, Y = param2, FUN = verll2)
library(ggplot2)
library(lattice)
rho <- 0.7
n <- 100
dados <- numeric(n)
for(i in 2:n){
dados[i] <- rho * dados[i - 1] + rnorm(1)}
plot(dados, type = "l")
abline(h = mean(dados))
plot(dados)
loglikeli1 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par*dados[1:(n-1)], sd = 1, log=TRUE))
return(out)
}
verll1 <- Vectorize(loglikeli1)
curve(from = 0, to = 1, expr = verll1)
abline(v = 0.7)
ll1 <- optimize(loglikeli1, c(0,1), maximum = TRUE)
emv1 <- ll1$maximum
loglikeli2 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log=TRUE))
return(out)
}
loglikeli3 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli3)
param1 <- seq(-1, 1, length = 30)
names(param1) <- param1
param2 <- seq(0, 100, length= 30)
names(param2) <- param2
z <- outer(X = param1, Y = param2, FUN = verll2)
require(lattice)
#> Loading required package: lattice
wireframe(z, drape=T, col.regions=rainbow(100))
ll2 <- optim(c(0.2, 1.5), fn = loglikeli3, hessian = TRUE)
emv2 <- ll2$par
emv2
ll2$hessian
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], log = TRUE))
return(-out)
}
verll3 <- Vectorize(loglikeli4)
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4, hessian = TRUE)
emv3 <- ll3$par
ll3
z <- outer(X = param1, Y = param2, FUN = verll2)
z <- outer(X = param1, Y = param2, FUN = loglikeli3)
par[1] <- seq(-1, 1, length = 30)
names(param1) <- param1
names(par[1]) <- param1
par[1] <- seq(-1, 1, length = 30)
#> Loading required package: lattice
wireframe(verll2, drape=T, col.regions=rainbow(100))
#> Loading required package: lattice
wireframe(verll2, drape=T, col.regions=rainbow(100))
param1 <- seq(-1, 1, length = 30)
names(par[1]) <- param1
param2 <- seq(0, 100, length= 30)
names(param2) <- param2
loglikeli3 <- function(param1, param2){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = param1*dados[1:(n-1)], sd = param2, log=TRUE))
return(-out)
}
param1 <- seq(-1, 1, length = 30)
names(par[1]) <- param1
param2 <- seq(0, 100, length= 30)
names(param2) <- param2
z <- outer(X = param1, Y = param2, FUN = loglikeli3)
install.packages("rgl")
install.packages("rgl")
library(rgl)
install.packages("rgl")
library(rgl)
?curve3d
?curve3d()
?curve3d()
?curve3d
??curve3d
sys3d()
verll2 <- Vectorize(loglikeli3)
loglikeli3 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli3)
### Gr치fico ---------------------------------------------------------------
mu  <- seq(0,6,0.1)
tau <- seq(0,3,0.1)
z <- outer(mu,tau,verll2)
z <- outer(mu,tau,verll2, data = dados)
z <- outer(mu,tau,verll2, data = dados)
loglikeli3 <- function(par, data){
n <- length(data)
out <- sum(dnorm(data[2:n], mean = par[1]*data[1:(n-1)], sd = par[2], log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli3)
### Gr치fico ---------------------------------------------------------------
mu  <- seq(0,6,0.1)
tau <- seq(0,3,0.1)
z <- outer(mu,tau,verll2, data = dados)
z <- outer(mu,tau,verll2, data = dados)
loglikeli3 <- function(mu, tau){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = mu*dados[1:(n-1)], sd = tau, log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli3, vectorize.args = c("mu", "tau"))
### Gr치fico ---------------------------------------------------------------
mu  <- seq(0,6,0.1)
tau <- seq(0,3,0.1)
z <- outer(mu,tau,verll2, data = dados)
loglikeli3 <- function(mu, tau, dados){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = mu*dados[1:(n-1)], sd = tau, log=TRUE))
return(-out)
}
verll2 <- Vectorize(loglikeli3, vectorize.args = c("mu", "tau"))
z <- outer(mu,tau,verll2, dados = dados)
persp3d(mu,tau,z)
zlim    <- range(z[!is.na(z)])
palette <- rev(rainbow(20))
colors  <- palette[19*(z-zlim[1])/diff(zlim) + 1]
persp3d(mu,tau,z,col=colors)
persp3d(mu,tau,z,col=colors)
### Gr치fico ---------------------------------------------------------------
mu  <- seq(0,1,0.1)
tau <- seq(0,5,0.1)
z <- outer(mu,tau,verll2, dados = dados)
zlim    <- range(z[!is.na(z)])
palette <- rev(rainbow(20))
colors  <- palette[19*(z-zlim[1])/diff(zlim) + 1]
persp3d(mu,tau,z,col=colors)
install.packages("bbmle")
library(bbmle)
?mle2()
loglikeli1 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par*dados[1:(n-1)], sd = 1, log=TRUE))
return(-out)
}
mle2(loglikeli1)
mle2(loglikeli1, 0.4)
si <- 0.4
mle2(loglikeli1, si)
loglikeli1 <- function(par){
n <- length(dados)
out <- prod(dnorm(dados[2:n], mean = par*dados[1:(n-1)], sd = 1))
return(-out)
}
mle2(loglikeli1, si)
mle2(loglikeli1)
library(bbmle)
mle2(loglikeli4, c(0.3, 1.5))
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], log = TRUE))
return(-out)
}
mle2(loglikeli4, c(0.3, 1.5))
mle2(loglikeli4, list(0.3, 1.5))
library(ggplot2)
library(lattice)
library(rgl)
library(bbmle)
rho <- 0.7
n <- 100
dados <- numeric(n)
for(i in 2:n){
dados[i] <- rho * dados[i - 1] + rnorm(1)}
plot(dados, type = "l")
abline(h = mean(dados))
plot(dados)
loglikeli4 <- function(par){
out <- dnorm(dados[1], mean = 0, sd = (1/sqrt(1-(par[1]^2))), log = TRUE) +
sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], log = TRUE))
return(-out)
}
mle2(loglikeli4, list(0.3, 1.5))
loglikeli4 <- function(rho, sigma, data){
out <- dnorm(data[1], mean = 0, sd = (1/sqrt(1-(rho^2))), log = TRUE) +
sum(dnorm(data[2:n], mean = rho*data[1:(n-1)], sd = sigma, log = TRUE))
return(-out)
}
mle2(loglikeli4, list(0.3, 1.5), data = list(data = dados))
mle2(loglikeli4, list(0.3, 1.5), data = list(data = dados),
lower = list(rho = -1, sigma = 0),
upper = list(rho = 1, sigma = Inf))
mle2(loglikeli4, list(rho = 0.3,sigma = 1.5), data = list(data = dados),
lower = list(rho = -1, sigma = 0),
upper = list(rho = 1, sigma = Inf))
mle2(loglikeli4, list(rho = 0.3,sigma = 1.5), data = list(data = dados),
lower = list(rho = -1, sigma = 0),
upper = list(rho = 1, sigma = Inf),
method="L-BFGS-B")
loglikeli4
loglikeli4 <- function(rho, sigma, data){
out <- dnorm(data[1], mean = 0, sd = (1/sqrt(1-(rho^2))), log = F) *
prod(dnorm(data[2:n], mean = rho*data[1:(n-1)], sd = sigma, log = F))
return(-out)
}
mle2(loglikeli4, list(rho = 0.3,sigma = 1.5), data = list(data = dados),
lower = list(rho = -1, sigma = 0),
upper = list(rho = 1, sigma = Inf),
method="L-BFGS-B")
loglikeli4 <- function(rho, sigma, data){
out <- dnorm(data[1], mean = 0, sd = (1/sqrt(1-(rho^2))), log = TRUE) +
sum(dnorm(data[2:n], mean = rho*data[1:(n-1)], sd = sigma, log = TRUE))
return(-out)
}
verll3 <- Vectorize(loglikeli4)
mle2(loglikeli4, list(rho = 0.3,sigma = 1.5), data = list(data = dados),
lower = list(rho = -1, sigma = 0),
upper = list(rho = 1, sigma = Inf),
method="L-BFGS-B")
loglikeli3 <- function(mu, tau, dados){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = mu*dados[1:(n-1)], sd = tau, log=TRUE))
return(-out)
}
mle2(loglikeli4, list(rho = 0.3,sigma = 1.5), data = list(data = dados),
lower = list(rho = 0, sigma = 0),
upper = list(rho = 1, sigma = Inf),
method="L-BFGS-B")
mle2(loglikeli3, list(mu = 0.3, tau = 1.5), data = list(data = dados),
lower = list(mu = 0, tau = 0),
upper = list(mu = 1, tau = Inf),
method="L-BFGS-B")
mle2(loglikeli3, list(mu = 0.3, tau = 1.5), data = list(dados = dados),
lower = list(mu = 0, tau = 0),
upper = list(mu = 1, tau = Inf),
method="L-BFGS-B")
library(ggplot2)
library(lattice)
library(rgl)
library(bbmle)
# Modelo autoregressivo de primeira ordem ---------------------------------
# Descri칞칚o do modelo:
# Os processos autorregressivos podem ser utilizados como modelos se for razo치vel
# assumir que o valor atual de uma s칠rie temporal depende do seu passado imediato
# mais um erro aleat칩rio.
# Observa칞칫es correlacionadas, ou seja, existe dependencia linear entre as
# variaveis, no caso os dados.
# Assuminto que o processo possui m칠dia zero:
# y_y+1 = p * y_t + e_t+1 onde e_t 칠 chamado processo e tem distribui칞칚o normal
# com m칠dia e vari칙ncia sigma^2. 0 < p < 1.
# Simula칞칚o de dados para o modelo ----------------------------------------
# Fixando a primeira observa칞칚o como zero e os parametros ser칚o:
# rho = 0.7, sigma^2 = 1
rho <- 0.7
n <- 100
dados <- numeric(n)
for(i in 2:n){
dados[i] <- rho * dados[i - 1] + rnorm(1)}
plot(dados, type = "l")
abline(h = mean(dados))
plot(dados)
# Para express칚o fechada retirando a primeira observa칞칚o ------------------
## Um par칙metro -----------------------------------------------------------
### Fun칞칚o ----------------------------------------------------------------
loglikeli1 <- function(par){
n <- length(dados)
out <- prod(dnorm(dados[2:n], mean = par*dados[1:(n-1)], sd = 1))
return(-out)
}
### Vetorizando a Fun칞칚o --------------------------------------------------
verll1 <- Vectorize(loglikeli1)
### Gr치fico ---------------------------------------------------------------
curve(from = 0, to = 1, expr = verll1)
abline(v = 0.7)
### EMV -------------------------------------------------------------------
ll1 <- optimize(loglikeli1, c(0,1), maximum = TRUE)
emv1 <- ll1$maximum
## Para dois par칙metros ---------------------------------------------------
### Fun칞칚o ----------------------------------------------------------------
loglikeli2 <- function(par){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log=TRUE))
return(out)
}
loglikeli3 <- function(mu, tau, dados){
n <- length(dados)
out <- sum(dnorm(dados[2:n], mean = mu*dados[1:(n-1)], sd = tau, log=TRUE))
return(-out)
}
### Vetorizando a fun칞칚o --------------------------------------------------
verll2 <- Vectorize(loglikeli3, vectorize.args = c("mu", "tau"))
### Gr치fico ---------------------------------------------------------------
### EMV -------------------------------------------------------------------
ll2 <- optim(c(0.2, 1.5), fn = loglikeli3, hessian = TRUE)
emv2 <- ll2$par
emv2
ll2$hessian
# Express칚o com a primeira observa칞칚o -------------------------------------
## Fun칞칚o -----------------------------------------------------------------
loglikeli4 <- function(rho, sigma, data){
out <- dnorm(data[1], mean = 0, sd = (1/sqrt(1-(rho^2))), log = TRUE) +
sum(dnorm(data[2:n], mean = rho*data[1:(n-1)], sd = sigma, log = TRUE))
return(-out)
}
## Vetorizando a fun칞칚o ---------------------------------------------------
verll3 <- Vectorize(loglikeli4)
## Gr치fico ----------------------------------------------------------------
persp3d()
## EMV --------------------------------------------------------------------
ll3 <- optim(c(0.3, 1.5), fn = loglikeli4, hessian = TRUE)
emv3 <- ll3$par
ll3
mle2(loglikeli3, list(mu = 0.3, tau = 1.5), data = list(dados = dados),
lower = list(mu = -1, tau = 0),
upper = list(mu = 1, tau = Inf),
method="L-BFGS-B")
fe <- mle2(loglikeli3, list(mu = 0.3, tau = 1.5), data = list(dados = dados),
lower = list(mu = -1, tau = 0),
upper = list(mu = 1, tau = Inf),
method="L-BFGS-B")
cofident(fe, methot = "quad")
confind(fe, methot = "quad")
confint(fe, methot = "quad")
shiny::runApp('츼rea de Trabalho/PET/nlmSet')
runApp('츼rea de Trabalho/PET/nlmSet')
runApp('츼rea de Trabalho/PET/nlmSet')
library(bbmle)
ll <- function(par, dados){
n <- length(dados)
fun <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log = TRUE))
return(fun)
}
ll <- function(par, dados){
n <- length(dados)
fun <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log = TRUE))
return(fun)
}
vll <- Vectorize(ll)
logll <- function(par, dados){
n <- length(dados)
fun <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log = TRUE))
return(fun)
}
likeli <- exp(ll)
likeli <- exp(ll)
ll <- function(par, dados){
n <- length(dados)
fun <- sum(dnorm(dados[2:n], mean = par[1]*dados[1:(n-1)], sd = par[2], log = TRUE))
return(fun)
}
vll <- Vectorize(ll)
likeli <- exp(ll)
ggplot(dados)
library(ggplot2)
set.seed(209)
rho <- 0.7
n <- 500
dados <- numeric(n)
for(i in 2:n){
dados[i] <- rho * dados[i - 1] + rnorm(1)}
ggplot(dados)
library(lattice)
xyplot(dados)
xyplot(data = dados)
xyplot(dados ~ c(0, 10))
xyplot(c(0, 10) ~ dados)
xyplot(c(-10, 10) ~ dados)
plot(dados)
ggplot(dados) + geom_line()
ggplot() + geom_line()
ggplot() + geom_line(aes(dados))
ggplot() + geom_line(aes(dados, c(-5, 5)))
plot(dados, type = "l")
plot(dados, type = "l", ylab = "Observa칞칫es", xlab = "Tempo")
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo")
ggplot(data = dados, aes(x = c(1:length(dados), y = dados)))
ggplot(aes(x = c(1:length(dados), y = dados)))
ggplot(aes(x = c(1:length(dados), y = dados))) + geom_point()
ggplot(aes(x = c(1:length(dados), y = dados))) + geom_point()
ggplot(aes(x = c(1:length(dados), y = dados))) + geom_point()
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo", title = "Observa칞칫es simuladas")
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo", main  = "Observa칞칫es simuladas")
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo", main  = "Observa칞칫es simuladas", col = c("blue"))
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo", main  = "Observa칞칫es simuladas", col = c("blue", "red"))
plot(dados ~ c(1:length(dados)), type = "l", ylab = "Observa칞칫es", xlab = "Tempo", main  = "Observa칞칫es simuladas", col = "dark blue")
set.seed(209)
rho <- 0.4
n <- 500
dados <- numeric(n)
for(i in 2:n){
dados[i] <- rho * dados[i - 1] + rnorm(1)}
str(dados)
summary(dados)
ll <- function(rho, sigma, dados){
n <- length(dados)
fun <- sum(dnorm(dados[2:n], mean = rho*dados[1:(n-1)], sd = sigma, log = TRUE))
return(-fun)
}
library(ggplot2)
setwd("~/츼rea de Trabalho/Gradua칞칚o/Infer칡ncia/Trabalho")
dir
dir()
dados <- read.table("google.csv", header = TRUE, sep = ",", dec = ".")
head(dados)
tail(dados)
dados <- read.table("google.csv", header = TRUE, sep = ",", dec = ".")
install.packages("kable")
setwd("~/츼rea de Trabalho/Gradua칞칚o/Infer칡ncia/Trabalho")
